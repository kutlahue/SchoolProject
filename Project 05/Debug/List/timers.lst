###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         21/Oct/2014  19:48:15
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        E:\Fall 14\ECE 306\WORKSPACE\SCHOOLPROJECT\PROJECT 05\timers.c
#    Command line  =  
#        "E:\Fall 14\ECE 306\WORKSPACE\SCHOOLPROJECT\PROJECT 05\timers.c" -lC
#        "E:\Fall 14\ECE 306\WORKSPACE\SCHOOLPROJECT\PROJECT 05\Debug\List\" -o
#        "E:\Fall 14\ECE 306\WORKSPACE\SCHOOLPROJECT\PROJECT 05\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        E:\Fall 14\ECE 306\WORKSPACE\SCHOOLPROJECT\PROJECT
#        05\Debug\List\timers.lst
#    Object file   =  
#        E:\Fall 14\ECE 306\WORKSPACE\SCHOOLPROJECT\PROJECT
#        05\Debug\Obj\timers.r43
#
###############################################################################

E:\Fall 14\ECE 306\WORKSPACE\SCHOOLPROJECT\PROJECT 05\timers.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : timers.c
      3          //
      4          //  Description: This file contains the timer control functions
      5          //
      6          //  Mattia Muller
      7          //  Oct 2014
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //------------------------------------------------------------------------------
     10          
     11          
     12          #include "macros.h"
     13          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x340
   \   unsigned short volatile TA0CTL
   \                     TA0CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   unsigned short volatile TA0CCTL0
   \                     TA0CCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x344
   \   unsigned short volatile TA0CCTL1
   \                     TA0CCTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x346
   \   unsigned short volatile TA0CCTL2
   \                     TA0CCTL2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x354
   \   unsigned short volatile TA0CCR1
   \                     TA0CCR1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x356
   \   unsigned short volatile TA0CCR2
   \                     TA0CCR2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x360
   \   unsigned short volatile TA0EX0
   \                     TA0EX0:
   \   000000                DS8 2
     14          #include "functions.h"
     15          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int five_msec_count;
   \                     five_msec_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned int five_msec_count_timer_A0 = SET_0, fifty_msec_count_timer_A1 = SET_0;
   \                     five_msec_count_timer_A0:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     fifty_msec_count_timer_A1:
   \   000000                DS8 2
     20          
     21          
     22          //=========================================================================== 
     23          // Function name: usleep10
     24          //
     25          // Description: This function is comparable to a classical sleep function
     26          //
     27          // Passed : usec - the amount of usec we want to sleep
     28          // Locals: no variables declared
     29          // Returned: no values returned
     30          //
     31          // Author: Mattia Muller
     32          // Date: Sept 2013
     33          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     34          //===========================================================================

   \                                 In  segment CODE, align 2
     35          void usleep10(unsigned int usec){
   \                     usleep10:
     36          //******************************************************************************
     37          //------------------------------------------------------------------------------
     38          // At the current clock rate this yields about 10usec per value passed
     39          // A value of  0 yields 1.37 uSec
     40          // A value of  1 yields 1.87 uSec
     41          // A value of  2 yields 2.36 uSec
     42          // A value of  3 yields 2.86 uSec
     43          // A value of  4 yields 3.36 uSec
     44          // A value of  5 yields 3.86 uSec
     45          // A value of  6 yields 4.36 uSec
     46          // A value of  7 yields 4.85 uSec
     47          // A value of  8 yields 5.354 uSec
     48          // A value of  9 yields 5.854 uSec
     49          // A value of 10 yields 6.353 uSec
     50          // A value of 11 yields 6.851 uSec
     51          // A value of 12 yields 7.351 uSec
     52          // A value of 13 yields 7.849 uSec
     53          // A value of 14 yields 8.350 uSec
     54          // A value of 15 yields 8.849 uSec
     55          // A value of 16 yields 9.342 uSec
     56          // A value of 17 yields 9.84 uSec
     57          // A value of 18 yields 10.34 uSec
     58          // A value of 19 yields 10.84 uSec
     59            int i,j;
     60            for(j=SET_0;j<usec;j++){
   \   000000   0E43         MOV.W   #0x0, R14
   \   000002   053C         JMP     ??usleep10_2
     61              for(i=SET_0;i<USLEEP_TIMER;i++);
   \                     ??usleep10_0:
   \   000004   1F53         ADD.W   #0x1, R15
   \                     ??usleep10_1:
   \   000006   3F900E00     CMP.W   #0xe, R15
   \   00000A   FC3B         JL      ??usleep10_0
   \   00000C   1E53         ADD.W   #0x1, R14
   \                     ??usleep10_2:
   \   00000E   0E9C         CMP.W   R12, R14
   \   000010   022C         JC      ??usleep10_3
   \   000012   0F43         MOV.W   #0x0, R15
   \   000014   F83F         JMP     ??usleep10_1
     62            }
     63          //------------------------------------------------------------------------------
     64          //******************************************************************************
     65          }
   \                     ??usleep10_3:
   \   000016   1001         RETA
     66          
     67          
     68          //=========================================================================== 
     69          // Function name: five_msec_sleep
     70          //
     71          // Description: This function is comparable to a classical sleep function
     72          //
     73          // Passed : fivemsec - the amount of 5 msec we want to sleep
     74          // Locals: no variables declared
     75          // Returned: no values returned
     76          //
     77          // Author: Mattia Muller
     78          // Date: Sept 2013
     79          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     80          //===========================================================================

   \                                 In  segment CODE, align 2
     81          void five_msec_sleep_A0(unsigned int fivemsec){
   \                     five_msec_sleep_A0:
     82          //------------------------------------------------------------------------------
     83          //Each count passed is at least x times 5 milliseconds
     84            five_msec_count_timer_A0 = SET_0;
   \   000000   8243....     MOV.W   #0x0, &five_msec_count_timer_A0
     85            while(fivemsec > (five_msec_count_timer_A0+SET_1));
   \                     ??five_msec_sleep_A0_0:
   \   000004   1F42....     MOV.W   &five_msec_count_timer_A0, R15
   \   000008   1F53         ADD.W   #0x1, R15
   \   00000A   0F9C         CMP.W   R12, R15
   \   00000C   FB2B         JNC     ??five_msec_sleep_A0_0
     86          //------------------------------------------------------------------------------
     87          }
   \   00000E   1001         RETA
     88          
     89          
     90          //=========================================================================== 
     91          // Function name: five_msec_sleep
     92          //
     93          // Description: This function is comparable to a classical sleep function
     94          //
     95          // Passed : fivemsec - the amount of 5 msec we want to sleep
     96          // Locals: no variables declared
     97          // Returned: no values returned
     98          //
     99          // Author: Mattia Muller
    100          // Date: Sept 2013
    101          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
    102          //===========================================================================

   \                                 In  segment CODE, align 2
    103          void five_msec_sleep(unsigned int fivemsec){
   \                     five_msec_sleep:
    104          //------------------------------------------------------------------------------
    105          //Each count passed is at least x times 5 milliseconds
    106            five_msec_count = SET_0;
   \   000000   8243....     MOV.W   #0x0, &five_msec_count
    107            while(fivemsec > (five_msec_count+SET_1));
   \                     ??five_msec_sleep_0:
   \   000004   1F42....     MOV.W   &five_msec_count, R15
   \   000008   1F53         ADD.W   #0x1, R15
   \   00000A   0F9C         CMP.W   R12, R15
   \   00000C   FB2B         JNC     ??five_msec_sleep_0
    108          //------------------------------------------------------------------------------
    109          }
   \   00000E   1001         RETA
    110          
    111          //=========================================================================== 
    112          // Function name: TimerB0code
    113          //
    114          // Description: This function interrupts the timer B0
    115          //
    116          // Passed : no variables passed
    117          // Locals: no variables declared
    118          // Returned: no values returned
    119          //
    120          // Author: Mattia Muller
    121          // Date: Sept 2013
    122          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
    123          //===========================================================================

   \                                 In  segment CODE, align 2
    124          void TimerB0code(void){
   \                     TimerB0code:
    125          //------------------------------------------------------------------------------
    126          // Timer B0 interrupt code
    127          //------------------------------------------------------------------------------
    128            Time_Sequence++;
   \   000000   9253....     ADD.W   #0x1, &Time_Sequence
    129            one_time = 1;
   \   000004   D243....     MOV.B   #0x1, &one_time
    130            if (five_msec_count < B0_COUNTER){
   \   000008   B290E803.... CMP.W   #0x3e8, &five_msec_count
   \   00000E   022C         JC      ??TimerB0code_0
    131              five_msec_count++;
   \   000010   9253....     ADD.W   #0x1, &five_msec_count
    132            }
    133          //------------------------------------------------------------------------------
    134          }
   \                     ??TimerB0code_0:
   \   000014   1001         RETA
    135          
    136          
    137          //=========================================================================== 
    138          // Function name: Init_Timer_A0
    139          //
    140          // Description: This function initializes timer A0 to interupt every 5msec
    141          //
    142          // Passed : no variables passed
    143          // Locals: no variables declared
    144          // Returned: no values returned
    145          // Globals: what_to_do, stop, straight_direction, state, time, vector
    146          //
    147          // Author: Mattia Muller
    148          // Date: Oct 2013
    149          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
    150          //===========================================================================
    151          //=============================================================================
    152          // timerA0
    153          // This block is generically refered to as timerA0 which contains 3 capture
    154          // compare interrupts and 1 overflow interrupt. 
    155          // timerA0-0 has its own interrupt.
    156          // timerA0-1,2,overflow share an interrupt vector
    157          // TimerA0 initialization sets up 0 and 1,2,Overflow
    158          //        |-----------------------------------------------|
    159          //        ^                                               v
    160          // Compare Interval              Clk    /Divide/Divide/Interval = Freq  
    161          // TA0CCR0_INTERVAL (2500) // 8,000,000 /  8   /  2   / 2500    = 200Hz => 5msec

   \                                 In  segment CODE, align 2
    162          void Init_Timer_A0(void){
   \                     Init_Timer_A0:
    163            TA0CTL  = TASSEL__SMCLK;        // SMCLK source
   \   000000   B24000024003 MOV.W   #0x200, &0x340
    164            TA0CTL |= TACLR ;               // Clear Timer A
   \   000006   A2D24003     BIS.W   #0x4, &0x340
    165            TA0CTL |= MC__CONTINUOUS;       // Continuous count mode
   \   00000A   B2D020004003 BIS.W   #0x20, &0x340
    166            TA0CTL |= ID__8;                // divide clock by 8
   \   000010   B2D0C0004003 BIS.W   #0xc0, &0x340
    167            TA0EX0 |= TAIDEX_1;             // Divide clock by 2
   \   000016   92D36003     BIS.W   #0x1, &0x360
    168          
    169            TA0CTL &= ~TAIE;                // TimerA0 counter interrupt disable [overflow]
   \   00001A   A2C34003     BIC.W   #0x2, &0x340
    170            TA0CTL &= ~TAIFG;                // TimerA0 counter interrupt flag cleared
   \   00001E   92C34003     BIC.W   #0x1, &0x340
    171          
    172            TA0CCR0 = TA0CCR0_INTERVAL;     // TA0CCR0 capture compare register
   \   000022   B240C4095203 MOV.W   #0x9c4, &0x352
    173            TA0CCTL0 |= CCIE;               // TA0CCR0 enable interrupt
   \   000028   B2D010004203 BIS.W   #0x10, &0x342
    174          
    175            TA0CCR1 = TA0CCR1_INTERVAL;     // TA0CCR1 capture compare register
   \   00002E   B240A8615403 MOV.W   #0x61a8, &0x354
    176            TA0CCTL1 |= CCIE;               // TA0CCR1 enable interrupt
   \   000034   B2D010004403 BIS.W   #0x10, &0x344
    177          
    178            TA0CCR2 = TA0CCR2_INTERVAL;     // TA0CCR2 capture compare register
   \   00003A   B24088135603 MOV.W   #0x1388, &0x356
    179            TA0CCTL2 |= CCIE;               // TA0CCR2 enable interrupt
   \   000040   B2D010004603 BIS.W   #0x10, &0x346
    180          }
   \   000046   1001         RETA
   \   000048                REQUIRE TA0CTL
   \   000048                REQUIRE TA0EX0
   \   000048                REQUIRE TA0CCR0
   \   000048                REQUIRE TA0CCTL0
   \   000048                REQUIRE TA0CCR1
   \   000048                REQUIRE TA0CCTL1
   \   000048                REQUIRE TA0CCR2
   \   000048                REQUIRE TA0CCTL2
    181          // timerA0
    182          //=============================================================================
    183          
    184          
    185          
    186          //=========================================================================== 
    187          // Function name: five_msec_sleep
    188          //
    189          // Description: This function is comparable to a classical sleep function
    190          //
    191          // Passed : fivemsec - the amount of 5 msec we want to sleep
    192          // Locals: no variables declared
    193          // Returned: no values returned
    194          //
    195          // Author: Mattia Muller
    196          // Date: Sept 2013
    197          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
    198          //===========================================================================

   \                                 In  segment CODE, align 2
    199          void fifty_msec_sleep_A1(unsigned int fifitymsec){
   \                     fifty_msec_sleep_A1:
    200          //------------------------------------------------------------------------------
    201          //Each count passed is at least x times 5 milliseconds
    202            fifty_msec_count_timer_A1 = SET_0;
   \   000000   8243....     MOV.W   #0x0, &fifty_msec_count_timer_A1
    203            while(fifitymsec > (fifty_msec_count_timer_A1+SET_1));
   \                     ??fifty_msec_sleep_A1_0:
   \   000004   1F42....     MOV.W   &fifty_msec_count_timer_A1, R15
   \   000008   1F53         ADD.W   #0x1, R15
   \   00000A   0F9C         CMP.W   R12, R15
   \   00000C   FB2B         JNC     ??fifty_msec_sleep_A1_0
    204          //------------------------------------------------------------------------------
    205          }
   \   00000E   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_A0
      4   TimerB0code
      4   fifty_msec_sleep_A1
      4   five_msec_sleep
      4   five_msec_sleep_A0
      4   usleep10


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      72  Init_Timer_A0
       2  TA0CCR0
       2  TA0CCR1
       2  TA0CCR2
       2  TA0CCTL0
       2  TA0CCTL1
       2  TA0CCTL2
       2  TA0CTL
       2  TA0EX0
       2  Time_Sequence
      22  TimerB0code
       2  fifty_msec_count_timer_A1
      16  fifty_msec_sleep_A1
       2  five_msec_count
       2  five_msec_count_timer_A0
      16  five_msec_sleep
      16  five_msec_sleep_A0
       1  one_time
      24  usleep10

 
 166 bytes in segment CODE
  16 bytes in segment DATA16_AN
   9 bytes in segment DATA16_Z
 
 166 bytes of CODE memory
   9 bytes of DATA memory (+ 16 bytes shared)

Errors: none
Warnings: none
