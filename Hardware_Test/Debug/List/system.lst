###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         25/Aug/2014  20:32:50
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\NCSU\Current\Code Class\Hardware_Test\system.c
#    Command line  =  
#        "D:\NCSU\Current\Code Class\Hardware_Test\system.c" -lC
#        "D:\NCSU\Current\Code Class\Hardware_Test\Debug\List\" -o
#        "D:\NCSU\Current\Code Class\Hardware_Test\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        D:\NCSU\Current\Code Class\Hardware_Test\Debug\List\system.lst
#    Object file   =  
#        D:\NCSU\Current\Code Class\Hardware_Test\Debug\Obj\system.r43
#
###############################################################################

D:\NCSU\Current\Code Class\Hardware_Test\system.c
      1          #include  "msp430.h"
      2          #include  "functions.h"
      3          //------------------------------------------------------------------------------
      4          // System Configurations
      5          
      6          // Tells the compiler to provide the value in reg as an input to an 
      7          // inline assembly block.  Even though the block contains no instructions,
      8          // the compiler may not optimize it away, and is told that the value
      9          // may change and should not be relied upon.
     10          
     11          //inline void READ_AND_DISCARD(unsigned int reg) __attribute__((always_inline));
     12          //void READ_AND_DISCARD(unsigned int reg){
     13          //  asm volatile ("" : "=m" (reg) : "r" (reg));
     14          //}
     15          
     16          //inline void enable_interrupts(void) __attribute__((always_inline));

   \                                 In  segment CODE, align 2
     17          void enable_interrupts(void){
   \                     enable_interrupts:
     18            __bis_SR_register(GIE);     // enable interrupts
   \   000000   32D2         BIS.W   #0x8, SR
     19          //  asm volatile ("eint \n");
     20          }
   \   000002   1001         RETA
     21          
     22          //inline void disable_interrupts(void) __attribute__((always_inline));
     23          //void disable_interrupts(void){
     24          //  asm volatile ("dint \n");
     25          //}
     26          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  enable_interrupts

 
 4 bytes in segment CODE
 
 4 bytes of CODE memory

Errors: none
Warnings: none
