###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         14/Oct/2014  17:05:18
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        05\timers.c
#    Command line  =  
#        "\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        05\timers.c" -lC "\\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Project 05\Debug\List\" -o
#        "\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        05\Debug\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR5739__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -Ol
#        --multiplier=32 --multiplier_location=4C0 --hw_workaround=CPU40
#        --hw_workaround=CPU39 --code_model=large
#    List file     =  
#        \\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        05\Debug\List\timers.lst
#    Object file   =  
#        \\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        05\Debug\Obj\timers.r43
#
###############################################################################

\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project 05\timers.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : timers.c
      3          //
      4          //  Description: This file contains the timer control functions
      5          //
      6          //  Mattia Muller
      7          //  Oct 2014
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //------------------------------------------------------------------------------
     10          
     11          
     12          #include "macros.h"

  #define FIGURE_8			(0x0E)
          ^
"\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project 05\macros.h",91  Warning[Pe047]: 
          incompatible redefinition of macro "FIGURE_8" (declared at line 76)
     13          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x340
   \   unsigned short volatile TA0CTL
   \                     TA0CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   unsigned short volatile TA0CCTL0
   \                     TA0CCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x360
   \   unsigned short volatile TA0EX0
   \                     TA0EX0:
   \   000000                DS8 2
     14          #include "functions.h"
     15          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int five_msec_count;
   \                     five_msec_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     19          
     20          
     21          //=========================================================================== 
     22          // Function name: usleep10
     23          //
     24          // Description: This function is comparable to a classical sleep function
     25          //
     26          // Passed : usec - the amount of usec we want to sleep
     27          // Locals: no variables declared
     28          // Returned: no values returned
     29          //
     30          // Author: Mattia Muller
     31          // Date: Sept 2013
     32          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     33          //===========================================================================

   \                                 In  segment CODE, align 2
     34          void usleep10(unsigned int usec){
   \                     usleep10:
     35          //******************************************************************************
     36          //------------------------------------------------------------------------------
     37          // At the current clock rate this yields about 10usec per value passed
     38          // A value of  0 yields 1.37 uSec
     39          // A value of  1 yields 1.87 uSec
     40          // A value of  2 yields 2.36 uSec
     41          // A value of  3 yields 2.86 uSec
     42          // A value of  4 yields 3.36 uSec
     43          // A value of  5 yields 3.86 uSec
     44          // A value of  6 yields 4.36 uSec
     45          // A value of  7 yields 4.85 uSec
     46          // A value of  8 yields 5.354 uSec
     47          // A value of  9 yields 5.854 uSec
     48          // A value of 10 yields 6.353 uSec
     49          // A value of 11 yields 6.851 uSec
     50          // A value of 12 yields 7.351 uSec
     51          // A value of 13 yields 7.849 uSec
     52          // A value of 14 yields 8.350 uSec
     53          // A value of 15 yields 8.849 uSec
     54          // A value of 16 yields 9.342 uSec
     55          // A value of 17 yields 9.84 uSec
     56          // A value of 18 yields 10.34 uSec
     57          // A value of 19 yields 10.84 uSec
     58            int i,j;
     59            for(j=SET_0;j<usec;j++){
   \   000000   0E43         MOV.W   #0x0, R14
   \   000002   053C         JMP     ??usleep10_2
     60              for(i=SET_0;i<USLEEP_TIMER;i++);
   \                     ??usleep10_0:
   \   000004   1F53         ADD.W   #0x1, R15
   \                     ??usleep10_1:
   \   000006   3F900E00     CMP.W   #0xe, R15
   \   00000A   FC3B         JL      ??usleep10_0
   \   00000C   1E53         ADD.W   #0x1, R14
   \                     ??usleep10_2:
   \   00000E   0E9C         CMP.W   R12, R14
   \   000010   022C         JC      ??usleep10_3
   \   000012   0F43         MOV.W   #0x0, R15
   \   000014   F83F         JMP     ??usleep10_1
     61            }
     62          //------------------------------------------------------------------------------
     63          //******************************************************************************
     64          }
   \                     ??usleep10_3:
   \   000016   1001         RETA
     65          
     66          //=========================================================================== 
     67          // Function name: five_msec_sleep
     68          //
     69          // Description: This function is comparable to a classical sleep function
     70          //
     71          // Passed : fivemsec - the amount of 5 msec we want to sleep
     72          // Locals: no variables declared
     73          // Returned: no values returned
     74          //
     75          // Author: Mattia Muller
     76          // Date: Sept 2013
     77          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     78          //===========================================================================

   \                                 In  segment CODE, align 2
     79          void five_msec_sleep(unsigned int fivemsec){
   \                     five_msec_sleep:
     80          //------------------------------------------------------------------------------
     81          //Each count passed is at least x times 5 milliseconds
     82            five_msec_count = SET_0;
   \   000000   8243....     MOV.W   #0x0, &five_msec_count
     83            while(fivemsec > (five_msec_count+SET_1));
   \                     ??five_msec_sleep_0:
   \   000004   1F42....     MOV.W   &five_msec_count, R15
   \   000008   1F53         ADD.W   #0x1, R15
   \   00000A   0F9C         CMP.W   R12, R15
   \   00000C   FB2B         JNC     ??five_msec_sleep_0
     84          //------------------------------------------------------------------------------
     85          }
   \   00000E   1001         RETA
     86          
     87          //=========================================================================== 
     88          // Function name: TimerB0code
     89          //
     90          // Description: This function interrupts the timer B0
     91          //
     92          // Passed : no variables passed
     93          // Locals: no variables declared
     94          // Returned: no values returned
     95          //
     96          // Author: Mattia Muller
     97          // Date: Sept 2013
     98          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     99          //===========================================================================

   \                                 In  segment CODE, align 2
    100          void TimerB0code(void){
   \                     TimerB0code:
    101          //------------------------------------------------------------------------------
    102          // Timer B0 interrupt code
    103          //------------------------------------------------------------------------------
    104            Time_Sequence++;
   \   000000   9253....     ADD.W   #0x1, &Time_Sequence
    105            one_time = 1;
   \   000004   D243....     MOV.B   #0x1, &one_time
    106            if (five_msec_count < B0_COUNTER){
   \   000008   B290E803.... CMP.W   #0x3e8, &five_msec_count
   \   00000E   022C         JC      ??TimerB0code_0
    107              five_msec_count++;
   \   000010   9253....     ADD.W   #0x1, &five_msec_count
    108            }
    109          //------------------------------------------------------------------------------
    110          }
   \                     ??TimerB0code_0:
   \   000014   1001         RETA
    111          
    112          
    113          //=========================================================================== 
    114          // Function name: Init_Timer_A0
    115          //
    116          // Description: This function initializes timer A0 to interupt every 5msec
    117          //
    118          // Passed : no variables passed
    119          // Locals: no variables declared
    120          // Returned: no values returned
    121          // Globals: what_to_do, stop, straight_direction, state, time, vector
    122          //
    123          // Author: Mattia Muller
    124          // Date: Oct 2013
    125          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
    126          //===========================================================================
    127          //=============================================================================
    128          // timerA0
    129          // This block is generically refered to as timerA0 which contains 3 capture
    130          // compare interrupts and 1 overflow interrupt. 
    131          // timerA0-0 has its own interrupt.
    132          // timerA0-1,2,overflow share an interrupt vector
    133          // TimerA0 initialization sets up 0 and 1,2,Overflow
    134          //        |-----------------------------------------------|
    135          //        ^                                               v
    136          // Compare Interval              Clk    /Divide/Divide/Interval = Freq  
    137          // TA0CCR0_INTERVAL (2500) // 8,000,000 /  8   /  2   / 2500    = 200Hz => 5msec

   \                                 In  segment CODE, align 2
    138          void Init_Timer_A0(void){
   \                     Init_Timer_A0:
    139            TA0CTL  = TASSEL__SMCLK;        // SMCLK source
   \   000000   B24000024003 MOV.W   #0x200, &0x340
    140            TA0CTL |= TACLR ;               // Clear Timer A
   \   000006   A2D24003     BIS.W   #0x4, &0x340
    141            TA0CTL |= MC__CONTINUOUS;       // Continuous count mode
   \   00000A   B2D020004003 BIS.W   #0x20, &0x340
    142            TA0CTL |= ID__8;                // divide clock by 8
   \   000010   B2D0C0004003 BIS.W   #0xc0, &0x340
    143            TA0EX0 |= TAIDEX_1;             // Divide clock by 2
   \   000016   92D36003     BIS.W   #0x1, &0x360
    144          
    145            TA0CTL &= ~TAIE;                // TimerA0 counter interrupt disable [overflow]
   \   00001A   A2C34003     BIC.W   #0x2, &0x340
    146            TA0CTL &= ~TAIFG;                // TimerA0 counter interrupt flag cleared
   \   00001E   92C34003     BIC.W   #0x1, &0x340
    147          
    148            TA0CCR0 = TA0CCR0_INTERVAL;     // TA0CCR0 capture compare register
   \   000022   B240C4095203 MOV.W   #0x9c4, &0x352
    149            TA0CCTL0 |= CCIE;               // TA0CCR0 enable interrupt
   \   000028   B2D010004203 BIS.W   #0x10, &0x342
    150          
    151            //TA0CCR1 = TA0CCR1_INTERVAL;     // TA0CCR1 capture compare register
    152            //TA0CCTL1 |= CCIE;               // TA0CCR1 enable interrupt
    153          
    154            //TA0CCR2 = TA0CCR2_INTERVAL;     // TA0CCR2 capture compare register
    155            //TA0CCTL2 |= CCIE;               // TA0CCR2 enable interrupt
    156          }
   \   00002E   1001         RETA
   \   000030                REQUIRE TA0CTL
   \   000030                REQUIRE TA0EX0
   \   000030                REQUIRE TA0CCR0
   \   000030                REQUIRE TA0CCTL0
    157          // timerA0
    158          //=============================================================================
    159          
    160          
    161          
    162          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_A0
      4   TimerB0code
      4   five_msec_sleep
      4   usleep10


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      48  Init_Timer_A0
       2  TA0CCR0
       2  TA0CCTL0
       2  TA0CTL
       2  TA0EX0
       2  Time_Sequence
      22  TimerB0code
       2  five_msec_count
      16  five_msec_sleep
       1  one_time
      24  usleep10

 
 110 bytes in segment CODE
   8 bytes in segment DATA16_AN
   5 bytes in segment DATA16_Z
 
 110 bytes of CODE memory
   5 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: 1
