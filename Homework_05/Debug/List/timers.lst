###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         15/Sep/2014  16:08:09
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Homework_03\timers.c
#    Command line  =  
#        "\\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Homework_03\timers.c" -lC
#        "\\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Homework_03\Debug\List\" -o
#        "\\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Homework_03\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -Ol --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        \\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Homework_03\Debug\List\timers.lst
#    Object file   =  
#        \\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Homework_03\Debug\Obj\timers.r43
#
###############################################################################

\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Homework_03\timers.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : timers.c
      3          //
      4          //  Description: This file contains the timer control functions
      5          //
      6          //  Mattia Muller
      7          //  Sep 2014
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //------------------------------------------------------------------------------
     10          
     11          
     12          #include "macros.h"
     13          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          volatile unsigned int five_msec_count;
   \                     five_msec_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     17          
     18          
     19          //=========================================================================== 
     20          // Function name: usleep10
     21          //
     22          // Description: This function is comparable to a classical sleep function
     23          //
     24          // Passed : usec - the amount of usec we want to sleep
     25          // Locals: no variables declared
     26          // Returned: no values returned
     27          //
     28          // Author: Mattia Muller
     29          // Date: Sept 2013
     30          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     31          //===========================================================================

   \                                 In  segment CODE, align 2
     32          void usleep10(unsigned int usec){
   \                     usleep10:
     33          //******************************************************************************
     34          //------------------------------------------------------------------------------
     35          // At the current clock rate this yields about 10usec per value passed
     36          // A value of  0 yields 1.37 uSec
     37          // A value of  1 yields 1.87 uSec
     38          // A value of  2 yields 2.36 uSec
     39          // A value of  3 yields 2.86 uSec
     40          // A value of  4 yields 3.36 uSec
     41          // A value of  5 yields 3.86 uSec
     42          // A value of  6 yields 4.36 uSec
     43          // A value of  7 yields 4.85 uSec
     44          // A value of  8 yields 5.354 uSec
     45          // A value of  9 yields 5.854 uSec
     46          // A value of 10 yields 6.353 uSec
     47          // A value of 11 yields 6.851 uSec
     48          // A value of 12 yields 7.351 uSec
     49          // A value of 13 yields 7.849 uSec
     50          // A value of 14 yields 8.350 uSec
     51          // A value of 15 yields 8.849 uSec
     52          // A value of 16 yields 9.342 uSec
     53          // A value of 17 yields 9.84 uSec
     54          // A value of 18 yields 10.34 uSec
     55          // A value of 19 yields 10.84 uSec
     56            int i,j;
     57            for(j=SET_0;j<usec;j++){
   \   000000   0E43         MOV.W   #0x0, R14
   \   000002   053C         JMP     ??usleep10_2
     58              for(i=SET_0;i<USLEEP_TIMER;i++);
   \                     ??usleep10_0:
   \   000004   1F53         ADD.W   #0x1, R15
   \                     ??usleep10_1:
   \   000006   3F900E00     CMP.W   #0xe, R15
   \   00000A   FC3B         JL      ??usleep10_0
   \   00000C   1E53         ADD.W   #0x1, R14
   \                     ??usleep10_2:
   \   00000E   0E9C         CMP.W   R12, R14
   \   000010   022C         JC      ??usleep10_3
   \   000012   0F43         MOV.W   #0x0, R15
   \   000014   F83F         JMP     ??usleep10_1
     59            }
     60          //------------------------------------------------------------------------------
     61          //******************************************************************************
     62          }
   \                     ??usleep10_3:
   \   000016   1001         RETA
     63          
     64          //=========================================================================== 
     65          // Function name: five_msec_sleep
     66          //
     67          // Description: This function is comparable to a classical sleep function
     68          //
     69          // Passed : fivemsec - the amount of 5 msec we want to sleep
     70          // Locals: no variables declared
     71          // Returned: no values returned
     72          //
     73          // Author: Mattia Muller
     74          // Date: Sept 2013
     75          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     76          //===========================================================================

   \                                 In  segment CODE, align 2
     77          void five_msec_sleep(unsigned int fivemsec){
   \                     five_msec_sleep:
     78          //------------------------------------------------------------------------------
     79          //Each count passed is at least x times 5 milliseconds
     80            five_msec_count = SET_0;
   \   000000   8243....     MOV.W   #0x0, &five_msec_count
     81            while(fivemsec > (five_msec_count+SET_1));
   \                     ??five_msec_sleep_0:
   \   000004   1F42....     MOV.W   &five_msec_count, R15
   \   000008   1F53         ADD.W   #0x1, R15
   \   00000A   0F9C         CMP.W   R12, R15
   \   00000C   FB2B         JNC     ??five_msec_sleep_0
     82          //------------------------------------------------------------------------------
     83          }
   \   00000E   1001         RETA
     84          
     85          //=========================================================================== 
     86          // Function name: TimerB0code
     87          //
     88          // Description: This function interrupts the timer B0
     89          //
     90          // Passed : no variables passed
     91          // Locals: no variables declared
     92          // Returned: no values returned
     93          //
     94          // Author: Mattia Muller
     95          // Date: Sept 2013
     96          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1) 
     97          //===========================================================================

   \                                 In  segment CODE, align 2
     98          void TimerB0code(void){
   \                     TimerB0code:
     99          //------------------------------------------------------------------------------
    100          // Timer B0 interrupt code
    101          //------------------------------------------------------------------------------
    102            Time_Sequence++;
   \   000000   9253....     ADD.W   #0x1, &Time_Sequence
    103            one_time = 1;
   \   000004   D243....     MOV.B   #0x1, &one_time
    104            if (five_msec_count < B0_COUNTER){
   \   000008   B290E803.... CMP.W   #0x3e8, &five_msec_count
   \   00000E   022C         JC      ??TimerB0code_0
    105              five_msec_count++;
   \   000010   9253....     ADD.W   #0x1, &five_msec_count
    106            }
    107          //------------------------------------------------------------------------------
    108          }
   \                     ??TimerB0code_0:
   \   000014   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   TimerB0code
      4   five_msec_sleep
      4   usleep10


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  Time_Sequence
      22  TimerB0code
       2  five_msec_count
      16  five_msec_sleep
       1  one_time
      24  usleep10

 
 62 bytes in segment CODE
  5 bytes in segment DATA16_Z
 
 62 bytes of CODE memory
  5 bytes of DATA memory

Errors: none
Warnings: none
