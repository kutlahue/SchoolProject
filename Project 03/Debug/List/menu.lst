###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         29/Sep/2014  19:16:04
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        \\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        03\menu.c
#    Command line  =  
#        "\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        03\menu.c" -lC "\\VBOXSVR\ncsu\Fall 14\ECE
#        306\Workspace\SchoolProject\Project 03\Debug\List\" -o
#        "\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        03\Debug\Obj\" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR5739__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -Ol
#        --multiplier=32 --multiplier_location=4C0 --hw_workaround=CPU40
#        --hw_workaround=CPU39 --code_model=large
#    List file     =  
#        \\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        03\Debug\List\menu.lst
#    Object file   =  
#        \\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project
#        03\Debug\Obj\menu.r43
#
###############################################################################

\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project 03\menu.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : menu.c
      3          //
      4          //  Description: This file contains the menu control functions
      5          //
      6          //  Mattia Muller
      7          //  Sep 2014
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (5.40.1)
      9          //------------------------------------------------------------------------------
     10          
     11          
     12          #include "macros.h"

  #define FIGURE_8			(0x0E)
          ^
"\\VBOXSVR\ncsu\Fall 14\ECE 306\Workspace\SchoolProject\Project 03\macros.h",91  Warning[Pe047]: 
          incompatible redefinition of macro "FIGURE_8" (declared at line 76)
     13          #include "msp430.h"
     14          #include "functions.h"
     15          
     16          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned char what_to_do, shape_selection = SET_0;
   \                     what_to_do:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     shape_selection:
   \   000000                DS8 1
     18          extern volatile unsigned int Time_Sequence, cycle_time, complete;
     19          extern char count_time, straight_direction, left_wheel_on, right_wheel_on, left_wheel_count, right_wheel_count;
     20          
     21          
     22          

   \                                 In  segment CODE, align 2
     23          void select_menu(void){
   \                     select_menu:
     24          	switch(shape_selection){
   \   000000   5E42....     MOV.B   &shape_selection, R14
   \   000004   5E83         SUB.B   #0x1, R14
   \   000006   1D24         JEQ     ??select_menu_1
   \   000008   5E83         SUB.B   #0x1, R14
   \   00000A   1E24         JEQ     ??select_menu_2
   \   00000C   5E83         SUB.B   #0x1, R14
   \   00000E   1F24         JEQ     ??select_menu_3
   \   000010   5E83         SUB.B   #0x1, R14
   \   000012   2124         JEQ     ??select_menu_4
   \   000014   5E83         SUB.B   #0x1, R14
   \   000016   2224         JEQ     ??select_menu_5
   \   000018   5E83         SUB.B   #0x1, R14
   \   00001A   2424         JEQ     ??select_menu_6
   \   00001C   5E83         SUB.B   #0x1, R14
   \   00001E   2624         JEQ     ??select_menu_7
   \   000020   5E83         SUB.B   #0x1, R14
   \   000022   2824         JEQ     ??select_menu_8
   \   000024   5E83         SUB.B   #0x1, R14
   \   000026   2924         JEQ     ??select_menu_9
   \   000028   5E83         SUB.B   #0x1, R14
   \   00002A   2B24         JEQ     ??select_menu_10
   \   00002C   5E83         SUB.B   #0x1, R14
   \   00002E   4A24         JEQ     ??select_menu_11
   \   000030   5E83         SUB.B   #0x1, R14
   \   000032   4C24         JEQ     ??select_menu_12
   \   000034   5E83         SUB.B   #0x1, R14
   \   000036   5524         JEQ     ??select_menu_13
   \   000038   5E83         SUB.B   #0x1, R14
   \   00003A   5D24         JEQ     ??select_menu_14
   \   00003C   5E83         SUB.B   #0x1, R14
   \   00003E   5524         JEQ     ??select_menu_15
   \   000040   1001         RETA
     25          		case LED_STATE:
     26           			what_to_do = LED_STATE;
   \                     ??select_menu_1:
   \   000042   D243....     MOV.B   #0x1, &what_to_do
     27           			break;
   \   000046   1001         RETA
     28           		case RW_FOR_ON:
     29           			what_to_do = RW_FOR_ON;
   \                     ??select_menu_2:
   \   000048   E243....     MOV.B   #0x2, &what_to_do
     30           			break;
   \   00004C   1001         RETA
     31           		case RW_FOR_OFF:
     32           			what_to_do = RW_FOR_OFF;
   \                     ??select_menu_3:
   \   00004E   F2400300.... MOV.B   #0x3, &what_to_do
     33           			break;
   \   000054   1001         RETA
     34           		case LW_FOR_ON:
     35           			what_to_do = LW_FOR_ON;
   \                     ??select_menu_4:
   \   000056   E242....     MOV.B   #0x4, &what_to_do
     36           			break;
   \   00005A   1001         RETA
     37           		case LW_FOR_OFF:
     38           			what_to_do = LW_FOR_OFF;
   \                     ??select_menu_5:
   \   00005C   F2400500.... MOV.B   #0x5, &what_to_do
     39           			break;
   \   000062   1001         RETA
     40           		case RW_REV_ON:
     41           			what_to_do = RW_REV_ON;
   \                     ??select_menu_6:
   \   000064   F2400600.... MOV.B   #0x6, &what_to_do
     42           			break;
   \   00006A   1001         RETA
     43           		case RW_REV_OFF:
     44           			what_to_do = RW_REV_OFF;
   \                     ??select_menu_7:
   \   00006C   F2400700.... MOV.B   #0x7, &what_to_do
     45           			break;
   \   000072   1001         RETA
     46           		case LW_REV_ON:
     47           			what_to_do = LW_REV_ON;
   \                     ??select_menu_8:
   \   000074   F242....     MOV.B   #0x8, &what_to_do
     48           			break;
   \   000078   1001         RETA
     49           		case LW_REV_OFF:
     50           			what_to_do = LW_REV_OFF;
   \                     ??select_menu_9:
   \   00007A   F2400900.... MOV.B   #0x9, &what_to_do
     51           			break;
   \   000080   1001         RETA
     52           		case STRAIGHT:
     53           			what_to_do = STRAIGHT;
   \                     ??select_menu_10:
   \   000082   F2400A00.... MOV.B   #0xa, &what_to_do
     54           			left_wheel_count = LEFT_WHEEL_COUNT;
   \   000088   F2401E00.... MOV.B   #0x1e, &left_wheel_count
     55           			right_wheel_count = RIGHT_WHEEL_COUNT;
   \   00008E   F2401100.... MOV.B   #0x11, &right_wheel_count
     56           			cycle_time = 0;
   \   000094   8243....     MOV.W   #0x0, &cycle_time
   \   000098   0C3C         JMP     ??select_menu_16
     57           			while(cycle_time < 100){ 
     58           				if(count_time != Time_Sequence){
   \                     ??select_menu_0:
   \   00009A   5F42....     MOV.B   &count_time, R15
   \   00009E   4F4F         MOV.B   R15, R15
   \   0000A0   1F92....     CMP.W   &Time_Sequence, R15
   \   0000A4   0624         JEQ     ??select_menu_16
     59           					count_time = Time_Sequence;
   \   0000A6   1E42....     MOV.W   &Time_Sequence, R14
   \   0000AA   C24E....     MOV.B   R14, &count_time
     60           					cycle_time++;
   \   0000AE   9253....     ADD.W   #0x1, &cycle_time
     61          				}
     62          			}
   \                     ??select_menu_16:
   \   0000B2   B2906400.... CMP.W   #0x64, &cycle_time
   \   0000B8   F02B         JNC     ??select_menu_0
     63           			cycle_time = 0;
   \   0000BA   8243....     MOV.W   #0x0, &cycle_time
     64           			straight_direction = 1;
   \   0000BE   D243....     MOV.B   #0x1, &straight_direction
     65           			break;
   \   0000C2   1001         RETA
     66           		case PROJECT_04:
     67           			what_to_do = PROJECT_04;
   \                     ??select_menu_11:
   \   0000C4   F2400B00.... MOV.B   #0xb, &what_to_do
     68           			break;
   \   0000CA   1001         RETA
     69           		case CIRCLE:
     70           			what_to_do = CIRCLE;
   \                     ??select_menu_12:
   \   0000CC   F2400C00.... MOV.B   #0xc, &what_to_do
     71           			left_wheel_count = LEFT_WHEEL_COUNT_CIRCLE;
   \   0000D2   E243....     MOV.B   #0x2, &left_wheel_count
     72           			right_wheel_count = RIGHT_WHEEL_COUNT_CIRCLE;
   \   0000D6   F2401600.... MOV.B   #0x16, &right_wheel_count
     73           			cycle_time = 0;
   \   0000DC   8243....     MOV.W   #0x0, &cycle_time
     74           			break;
   \   0000E0   1001         RETA
     75           		case THUMB_WHEEL:
     76           			what_to_do = THUMB_WHEEL;
   \                     ??select_menu_13:
   \   0000E2   F2400D00.... MOV.B   #0xd, &what_to_do
     77           			break;
   \   0000E8   1001         RETA
     78                          case TRIANGLE:
     79                                  what_to_do = TRIANGLE;
   \                     ??select_menu_15:
   \   0000EA   F2400F00.... MOV.B   #0xf, &what_to_do
     80                                  cycle_time = 0;
   \   0000F0   8243....     MOV.W   #0x0, &cycle_time
     81           			break;
   \   0000F4   1001         RETA
     82                          case FIGURE_8:
     83                                  what_to_do = FIGURE_8; 
   \                     ??select_menu_14:
   \   0000F6   F2400E00.... MOV.B   #0xe, &what_to_do
     84          			cycle_time = 0;
   \   0000FC   8243....     MOV.W   #0x0, &cycle_time
     85                                  break;
     86          	}
     87          } 
   \   000100   1001         RETA
     88          
     89          //---------------------------------------------------

   \                                 In  segment CODE, align 2
     90          void shape_menu(void){
   \                     shape_menu:
     91          	shape_selection++;
   \   000000   D253....     ADD.B   #0x1, &shape_selection
     92          	if(shape_selection > TRIANGLE){
   \   000004   F2901000.... CMP.B   #0x10, &shape_selection
   \   00000A   0228         JNC     ??shape_menu_0
     93           		shape_selection = LED_STATE;
   \   00000C   D243....     MOV.B   #0x1, &shape_selection
     94           	}
     95           	switch(shape_selection){
   \                     ??shape_menu_0:
   \   000010   5E42....     MOV.B   &shape_selection, R14
   \   000014   5E83         SUB.B   #0x1, R14
   \   000016   1924         JEQ     ??shape_menu_1
   \   000018   5E83         SUB.B   #0x1, R14
   \   00001A   1924         JEQ     ??shape_menu_2
   \   00001C   5E83         SUB.B   #0x1, R14
   \   00001E   1D24         JEQ     ??shape_menu_3
   \   000020   5E83         SUB.B   #0x1, R14
   \   000022   2124         JEQ     ??shape_menu_4
   \   000024   5E83         SUB.B   #0x1, R14
   \   000026   2524         JEQ     ??shape_menu_5
   \   000028   5E83         SUB.B   #0x1, R14
   \   00002A   2924         JEQ     ??shape_menu_6
   \   00002C   5E83         SUB.B   #0x1, R14
   \   00002E   2D24         JEQ     ??shape_menu_7
   \   000030   5E83         SUB.B   #0x1, R14
   \   000032   3124         JEQ     ??shape_menu_8
   \   000034   5E83         SUB.B   #0x1, R14
   \   000036   3524         JEQ     ??shape_menu_9
   \   000038   5E83         SUB.B   #0x1, R14
   \   00003A   3924         JEQ     ??shape_menu_10
   \   00003C   6E83         SUB.B   #0x2, R14
   \   00003E   3D24         JEQ     ??shape_menu_11
   \   000040   6E83         SUB.B   #0x2, R14
   \   000042   4124         JEQ     ??shape_menu_12
   \   000044   5E83         SUB.B   #0x1, R14
   \   000046   4524         JEQ     ??shape_menu_13
   \   000048   1001         RETA
     96           		case LED_STATE:
     97           			shape_LED_STATE();
                  			^
Warning[Pe223]: function "shape_LED_STATE" declared implicitly
   \                     ??shape_menu_1:
   \   00004A   ........     BRA     #shape_LED_STATE
     98           			break;
     99           		case RW_FOR_ON:
    100                                    lcd_out(" RT FW ON  ",LCD_LINE_1);
   \                     ??shape_menu_2:
   \   00004E   7D408000     MOV.B   #0x80, R13
   \   000052   3C40....     MOV.W   #`?<Constant " RT FW ON  ">`, R12
   \   000056   ........     BRA     #lcd_out
    101          			 //shape_On();
    102          			 break;
    103           		case RW_FOR_OFF:
    104                                    lcd_out(" RT FW OFF  ",LCD_LINE_1);
   \                     ??shape_menu_3:
   \   00005A   7D408000     MOV.B   #0x80, R13
   \   00005E   3C40....     MOV.W   #`?<Constant " RT FW OFF  ">`, R12
   \   000062   ........     BRA     #lcd_out
    105          			 //shape_OFF();
    106          			 break;
    107           		case LW_FOR_ON:
    108                                    lcd_out(" LT FW ON  ",LCD_LINE_1);
   \                     ??shape_menu_4:
   \   000066   7D408000     MOV.B   #0x80, R13
   \   00006A   3C40....     MOV.W   #`?<Constant " LT FW ON  ">`, R12
   \   00006E   ........     BRA     #lcd_out
    109          			 //shape_On();
    110          			 break;
    111           		case LW_FOR_OFF:
    112                                    lcd_out(" LT FW OFF  ",LCD_LINE_1);
   \                     ??shape_menu_5:
   \   000072   7D408000     MOV.B   #0x80, R13
   \   000076   3C40....     MOV.W   #`?<Constant " LT FW OFF  ">`, R12
   \   00007A   ........     BRA     #lcd_out
    113          			 //shape_OFF();
    114          			 break;
    115           		case RW_REV_ON:
    116                                    lcd_out(" RT REV ON  ",LCD_LINE_1);
   \                     ??shape_menu_6:
   \   00007E   7D408000     MOV.B   #0x80, R13
   \   000082   3C40....     MOV.W   #`?<Constant " RT REV ON  ">`, R12
   \   000086   ........     BRA     #lcd_out
    117          			 //shape_On();
    118          			 break;
    119          		case RW_REV_OFF:
    120                                    lcd_out(" RT REV OFF  ",LCD_LINE_1);
   \                     ??shape_menu_7:
   \   00008A   7D408000     MOV.B   #0x80, R13
   \   00008E   3C40....     MOV.W   #`?<Constant " RT REV OFF  ">`, R12
   \   000092   ........     BRA     #lcd_out
    121          			 //shape_OFF();
    122          			 break;
    123           		case LW_REV_ON:
    124                                    lcd_out(" LT REV ON  ",LCD_LINE_1);
   \                     ??shape_menu_8:
   \   000096   7D408000     MOV.B   #0x80, R13
   \   00009A   3C40....     MOV.W   #`?<Constant " LT REV ON  ">`, R12
   \   00009E   ........     BRA     #lcd_out
    125          			 //shape_On();
    126          			 break;
    127           		case LW_REV_OFF:
    128                                    lcd_out(" LT FW OFF  ",LCD_LINE_1);
   \                     ??shape_menu_9:
   \   0000A2   7D408000     MOV.B   #0x80, R13
   \   0000A6   3C40....     MOV.W   #`?<Constant " LT FW OFF  ">`, R12
   \   0000AA   ........     BRA     #lcd_out
    129          			 //shape_OFF();
    130          			 break;
    131           		case STRAIGHT:
    132                                    lcd_out("  Straight  ",LCD_LINE_1);
   \                     ??shape_menu_10:
   \   0000AE   7D408000     MOV.B   #0x80, R13
   \   0000B2   3C40....     MOV.W   #`?<Constant "  Straight  ">`, R12
   \   0000B6   ........     BRA     #lcd_out
    133          			 break;
    134           		case CIRCLE:
    135                                      lcd_out("  Circle  ",LCD_LINE_1);
   \                     ??shape_menu_11:
   \   0000BA   7D408000     MOV.B   #0x80, R13
   \   0000BE   3C40....     MOV.W   #`?<Constant "  Circle  ">`, R12
   \   0000C2   ........     BRA     #lcd_out
    136           			break;
    137           		case FIGURE_8:
    138                                    lcd_out(" Figure 8  ",LCD_LINE_1);
   \                     ??shape_menu_12:
   \   0000C6   7D408000     MOV.B   #0x80, R13
   \   0000CA   3C40....     MOV.W   #`?<Constant " Figure 8  ">`, R12
   \   0000CE   ........     BRA     #lcd_out
    139          			 break;
    140           		case TRIANGLE:
    141                                    lcd_out(" Triangle  ",LCD_LINE_1);
   \                     ??shape_menu_13:
   \   0000D2   7D408000     MOV.B   #0x80, R13
   \   0000D6   3C40....     MOV.W   #`?<Constant " Triangle  ">`, R12
   \   0000DA   ........     BRA     #lcd_out
    142           			break;
    143           	}
    144          //-----------------------------------------------------
    145          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " RT FW ON  ">`:
   \   000000   205254204657 DC8 " RT FW ON  "
   \            204F4E202000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " RT FW OFF  ">`:
   \   000000   205254204657 DC8 " RT FW OFF  "
   \            204F46462020
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " LT FW ON  ">`:
   \   000000   204C54204657 DC8 " LT FW ON  "
   \            204F4E202000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " LT FW OFF  ">`:
   \   000000   204C54204657 DC8 " LT FW OFF  "
   \            204F46462020
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " RT REV ON  ">`:
   \   000000   205254205245 DC8 " RT REV ON  "
   \            56204F4E2020
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " RT REV OFF  ">`:
   \   000000   205254205245 DC8 " RT REV OFF  "
   \            56204F464620
   \            2000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " LT REV ON  ">`:
   \   000000   204C54205245 DC8 " LT REV ON  "
   \            56204F4E2020
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Straight  ">`:
   \   000000   202053747261 DC8 "  Straight  "
   \            696768742020
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Circle  ">`:
   \   000000   202043697263 DC8 "  Circle  "
   \            6C65202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Figure 8  ">`:
   \   000000   204669677572 DC8 " Figure 8  "
   \            652038202000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Triangle  ">`:
   \   000000   20547269616E DC8 " Triangle  "
   \            676C65202000
    146          	
    147          	

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   select_menu
      4   shape_menu
        4   -> lcd_out
        4   -> shape_LED_STATE


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "  Circle  ">
      13  ?<Constant "  Straight  ">
      12  ?<Constant " Figure 8  ">
      13  ?<Constant " LT FW OFF  ">
      12  ?<Constant " LT FW ON  ">
      13  ?<Constant " LT REV ON  ">
      13  ?<Constant " RT FW OFF  ">
      12  ?<Constant " RT FW ON  ">
      14  ?<Constant " RT REV OFF  ">
      13  ?<Constant " RT REV ON  ">
      12  ?<Constant " Triangle  ">
     258  select_menu
     222  shape_menu
       1  shape_selection
       1  what_to_do

 
 480 bytes in segment CODE
 138 bytes in segment DATA16_C
   2 bytes in segment DATA16_Z
 
 480 bytes of CODE  memory
 138 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: 2
